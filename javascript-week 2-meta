FUNCTIONS

- functions allow you to take code that performs a set of related actions and group them under a single label

- you invoke function to run its code

- exercise : create a function that adds two numbers, a and b, together to create c
  function addTwoNums() {
  var a = 5;
  var b = 10;
  var c = a + b;
  console.log(c);
  } 
  addTwoNums(); //calls function

- exercise : make addTwoNums() more flexible with the values it accepts
  function(a,b) { //a and b are parameters
  var c = a + b;  
  console.log(c);
  }
  addTwoNums(2,2); //2 and 2 are arguments

_________________________________________________

INTRODUCTION TO OBJECTS

- used to group together a collection of related properties belonging to one entity

- use a dot operator to describe variables of the storeManager object

- a variable's name is a property key

- a variable's value is a property value of an object

- an object can also be defined by listing the key value pairs inside the object literal, 
  which specifies them as comma delimited properties

- list each object property within curly braces, after the assignmnt operator, of an object declaration, 
  denoting its property keys and values

- ex, object literal syntax: 

  var assistantManager = {
    movement: 3,
    socialSkills: 30,
    streetSmarts: 30,
    health: 40
  }

- you can add more properties to an object once its been declared by using dot notation

- ex:

  assistant Manager.nextAchievement = "get promoted";

_________________________________________________

OBJECT LITERALS AND DOT NOTATION 

- to access an object or its individual properties, use console.log

- another way to define an object :
  save an empty object to a variable,
  use dot notation to declare new properties of the object,
  use the assignment operator to add values to the properties of the object

- ex: 

  var house {};
  house.rooms = 4;
  house.color = "pink";
  house.priceUSD = 12345

- you can use this object notation along with the object literal notation to add properties as you go

_________________________________________________

OBJECT LITERAtlS AND BRACKET NOTATION

- declare the object as a variable

- list the property keys of the object in brackets as strings 

- assign property values with the assignment operator

- bracket notation can be used alongside dot notation

- with this notation, you can add spaces inside property keys

- unlike dot notation, bracket notation can evaluate expressions

- ex, bracket notation:

  var house = {};
  house['rooms'] = 4;
  house['color'] = 'pink';
  house['priceUSD'] = 12345;

- ex, evaluating expressions

  var arrOfKeys = ['speed', 'altitude', 'color'];
  var drone = {
    speed: 100,
    altitude: 200,
    color: red"
  }
  for (var i = 0; i < arrOfKeys.length; i++) {
    console.log(drone[arrofKeys[i]]);
  }

  /* output : 
  100
  200
  red
  */
_________________________________________________

ARRAYS ARE OBJECTS

push():
  - adds items to the end of an array
  - ex:
    var fruits = [];
    fruits.push("apple);
    fruits.push("pear"); 
    //[apple, pear]
  - ex:
    var ourArray = [1, 2, 3];
    ourArray push([4, 5, 6]);
    console.log(ourArray)
    // [1, 2, 3, [4, 5, 6]]

pop()
  - removes the last item from an array
  - ex:
    fruits.pop();
    console.log(fruits); 
    //[apple]

- you can use return instead of console.log

  ex: 
  function arrayBuilder(one, two, three){
    var arr = [];
    arr.push(one);
    arr.push(two);
    arr.push(three);
    return arr;
  }

- you can also save the function call to a variable and console.log it

  ex: var simpleArr = arrayBuilder('apple', 'pear', 'plum');
      console.log(simpleArr); 
      //['apple', 'pear', 'plum']

_________________________________________________

MATH OBJECT CHEAT SHEET

number constants, built into Math object

  - Math.PI = 3.14159
  - Math.E (Euler's constant) = 2.718
  - Math.LN2 (natural logarithm) = 0.693

rounding methods, build into Math object

  - Math.ceil(): rounds up to closest integer
  - Math.floor(): rounds down to closest integer
  - Math.round(): rounds up to closest integer if the decimal is .5 or above
    otherwise rounds down to closest integer
  - Math.trunc(): trims the decimal, leaving only the integer

arithmetic and calculus method

  - Math.pow(2,3): calculates the number 2 to the power of 3
  - Math.sqrt(16): calculates the square root of 16
  - Math.cbrt(8): calculates the cube root of 8
  - Math.abs(-10): returns the absolute value
  - logarithmic methods:
    Math.log()
    Math.log2()
    Math.log10()
  - Math.min(9, 8, 7): returns the minimum value
  - Math.max(9, 8, 7): returns the maximum value
  - trigonometric method:
    Marh.sin()
    (Math.cos()
    Math.tan()

_________________________________________________
  
MATH OBJECT

- random method: generates a number between 0 and 0.99

_________________________________________________

A CLOSER LOOK AT STRINGS

- iterable: a data type that can be iterated over using a "for of" loop, ex: arrays, strings

- for loop over arrays 

  ex:  
    
    var leters = ['a', 'b', 'c'];
    
    for (i = 0; i < letters.length; i++) {
      console.log(letters[i]);
    }

- for loop over strings

  ex:   
  
    var letters = 'abc';
  
    for (i = 0; i < letters.length; i++) {
      console.log(letters[i]);
    }

- pop() doesn't work on strings

  ex: 

  var greet = 'Hello';

  console.log(greet(pop)); //leads to an error because strings cannot use pop method

- adding strings is the same as concatenating strings

  ex:

  var greet = 'Hello';
  var user = 'Lisa';

  console.log(greet.concat(user)); //note the syntax, use dot notation
  //output: Hello Lisa

  _________________________________________________

STRING CHEAT SHEET

- length property: finds the length of a string; an empty string is length 0

  syntax:
  string.length

  ex: 
  var greet = "Hello, ";
  greet.length; //7

- charAt() method: returns a character at a specified index in a string

  syntax:
  string.charAt(index);

  ex:
  var greet = "Hello, ";  
  greet.charAt(0); //'H'

  ex (get the last letter in a string):
  var greet = "Hello,";
  greet.charAt(greet.length - 1); // ","

- concat() method: 
  joins two or more strings
  creates a new string
  doesn't change original string

  syntax:
  string.concat(string1, string2, ..., stringX);

  ex: 
  Wo.concat("rl").concat("d"); //"World"

  ex: 
  var greet = 'Hello ';
  var place = 'World'

  greet.concat(place); //'Hello World'

- indexOf(): 
  returns the first occurence of a value in a string 
  if value not found, returns -1
  case sensitive

  syntax:
  string.indexOf(searchvalue, start);

  ex:
  "ho-ho-ho".indexOf('h'); //0
  
  ex:
  let text = 'ho-ho-ho';
  text.indexOf('h', 2); //3

  ex:
  let greet = "Hello World, welcome to the Universe.";
  greet.indexOf('welcome'); //13

- lastIndexof():
  finds the last instance of a value in a string
  works similarly to indexOf()

- split():
  splits a string into an array of substrings
  returns a new array
  does not alter the original string
  if " " is used as a separator, split(" ") splits in between words

  syntax:
  string.split(separator, limit)

  ex:
  "ho-ho-ho".split('-'); //['ho', 'ho', 'ho']

  ex:
  let text = "How are you doing today?" 
  const myArray = split.text(" "); // ['How', 'are', 'you', 'doing', 'today?']
  let word = myArray[1]; // 'are'

  ex:
  let text = "How are you doing today?"
  const myArray = split.text(' ', 3); // ['How', 'are', 'you'], array is limited to 3 words

- .toUpperCase & .toLowerCase:
  changes the case of the values in a string
  
  ex:
  let greet = "Hello";
  greet.toUpperCase; //"HELLO"
  greet.toLowerCase; //"hello"

  _________________________________________________

OBJECT METHOD

- an object's properties are referred to as key-value pairs

- you can assign key-values to an object using dot notation and the assignment operator

- ex:

  let myCar = {}
  myCar.color = red;

- an objects key-values can include functions, which in this context are referred to as methods

- ex:

  car.turnKey = function() {
    console.log('Car is running.');
  }

- this function can only be accessed through the object that it is a member of
  .turntheKey needs to be accessed through myCar, use myCar.turntheKey
  when invoking methods, a parentheses needs to be used 

- constructing an object with properties using the constructor function
  3 properties (key values) total, the function is a method 

  var = myCar {};
  car.mileage = 98765;
  car.color = 'red';
  console.log(myCar);
  car.turnTheKey = function() {
    console.log('The engine is running.');
  }
  console.log(myCar);
  car.lightsOn = function () {
    console.log('The lights are on.')
  }
  console.log(myCar);
  myCar.lightsOn();
  myCar.turnTheKey();














  






  

