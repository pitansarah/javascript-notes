FUNCTIONS

- functions let you to take code that performs a set of related actions and group them under a single label

- you invoke or call a function to run its code

- exercise : 
  
  //create a function that adds two numbers, a and b, together to create c
    
  function addTwoNums() {
    var a = 5;
    var b = 10;
    var c = a + b;
    console.log(c);
    } 
    addTwoNums(); //this calls function

- exercise : 

  //make addTwoNums() more flexible with the values it accepts

    function(a,b) { //a and b are parameters
    var c = a + b;  
    console.log(c);
    }
    addTwoNums(2,2); //2 and 2 are arguments

_________________________________________________

INTRODUCTION TO OBJECTS

- objects are used to group together a collection of related properties belonging to one entity

- a variable's name is a property key

- a variable's value is a property value 

- an object can be defined with object literal notation:
  declare the object  
  assign this object to its properties using an assignment operator followed by curly braces
  list each object property within curly braces
  name the property, followed by a colon
  separate each property with a comma

- object literal notation: 

  ex:
    var assistantManager = {
      movement: 3,
      socialSkills: 30,
      streetSmarts: 30,
      health: 40
    }

- you can add more properties to an object once its been declared by using dot notation

    ex:
     assistant Manager.nextAchievement = "get promoted";

_________________________________________________

OBJECT LITERALS AND DOT NOTATION 

- to access an object or its individual properties, use console.log

- another way to define an object :
  save an empty object to a variable,
  use dot notation to declare new properties of the object,
  use the assignment operator to add values to the properties of the object

    ex: 
  
    var house {};
    house.rooms = 4;
    house.color = "pink";
    house.priceUSD = 12345

- you can use this object notation along with the object literal notation to add properties as you go

_________________________________________________

OBJECT LITERALS AND BRACKET NOTATION

- declare the object as a variable

- list the property keys of the object in brackets as strings 

- assign property values with the assignment operator

- bracket notation can be used alongside dot notation

- bracket notation allows for spaces inside property keys

- bracket notation can evaluate expressions

    ex of bracket notation:
  
    var house = {};
    house['rooms'] = 4;
    house['color'] = 'pink';
    house['priceUSD'] = 12345;

   ex of bracket notation evaluating expressions:
  
    var arrOfKeys = ['speed', 'altitude', 'color'];
    var drone = {
      speed: 100,
      altitude: 200,
      color: red"
    } for (var i = 0; i < arrOfKeys.length; i++) {
      console.log(drone[arrofKeys[i]]);
    }
  
    /* output : 
    100
    200
    red
    */
_________________________________________________

ARRAYS ARE OBJECTS

push():

  - adds items to the end of an array

    ex:
    var fruits = [];
    fruits.push("apple);
    fruits.push("pear"); 
    //[apple, pear]

    ex:
    var ourArray = [1, 2, 3];
    ourArray push([4, 5, 6]);
    console.log(ourArray)
    // [1, 2, 3, [4, 5, 6]]

pop()
  - removes the last item from an array
    
    ex:
    fruits.pop();
    console.log(fruits); 
    //[apple]

- you can use return instead of console.log, but the result doesn't print to console

    ex: 
    function arrayBuilder(one, two, three){
      var arr = [];
      arr.push(one);
      arr.push(two);
      arr.push(three);
      return arr;
    }

- you can also save the function call to a variable and console.log it

    ex: 
    var simpleArr = arrayBuilder('apple', 'pear', 'plum');
      console.log(simpleArr); 
      //['apple', 'pear', 'plum']

map() 
  - returns a new array with specified values according to a called function 

  ex:

    let arr = [1, 2, 3, 4, 5, 6];
    let newArr = numbers.map(myFunction)
    myFunction () {
      return num * 10;
    }
    // [10, 20, 30, 40, 50, 60]

sort() 
  - sorts strings in an array alphabetically and numerically (with some modifications)
  
    ex (numeric sorting):
    include a compare function (not necessary with alphabetic sorting)

      let arr = [6, 2, 1, 4, 5, 3];
      arr.sort(function(a, b){return a - b});
      //[1, 2, 3, 4, 5, 6]

_________________________________________________

MATH OBJECT CHEAT SHEET

- these methods are built into the math object

number constants

  - Math.PI = 3.14159
  - Math.E (Euler's constant) = 2.718
  - Math.LN2 (natural logarithm) = 0.693

rounding methods

  - Math.ceil(): rounds up to closest integer
  - Math.floor(): rounds down to closest integer
  - Math.round(): rounds up to closest integer if the decimal is .5 or above
    otherwise rounds down to closest integer
  - Math.trunc(): trims the decimal, leaving only the integer

arithmetic and calculus methods

  - Math.pow(2,3): calculates the number 2 to the power of 3
  - Math.sqrt(16): calculates the square root of 16
  - Math.cbrt(8): calculates the cube root of 8
  - Math.abs(-10): returns the absolute value
  - logarithmic methods:
    Math.log()
    Math.log2()
    Math.log10()
  - Math.min(9, 8, 7): returns the minimum value
  - Math.max(9, 8, 7): returns the maximum value
  - trigonometric methods:
    Math.sin()
    Math.cos()
    Math.tan()

_________________________________________________
  
MATH OBJECT

- random method: generates a number between 0 and 0.99; Math.random()
- round method: rounds a number to its nearest integer; Math.round()
- ceil method: rounds a number up to its nearest integer; Math.ceil()
- floor method: rounds a number down to its nearest integer; Math.floor()
- trunc method: returns the integer part of a number; Math.trunc()
- Math.sign() ???
- pow method: returns the value of x to the power of y; Math.pow()
- see more : https://www.w3schools.com/js/js_math.asp

_________________________________________________

A CLOSER LOOK AT STRINGS

- iterable data: data that can be looped over; ex: arrays, strings

- for loop over arrays 

  ex:  
    
    var leters = ['a', 'b', 'c'];
    
    for (i = 0; i < letters.length; i++) {
      console.log(letters[i]);
    }

- for loop over strings

    ex:   
    
      var letters = 'abc';
    
      for (i = 0; i < letters.length; i++) {
        console.log(letters[i]);
      }

- pop() doesn't work on any other data type besides arrays

- concatenating strings

    ex:
  
    var greet = 'Hello';
    var user = 'Lisa';
  
    console.log(greet.concat(user)); 
    //output: Hello Lisa

_________________________________________________

STRING CHEAT SHEET

- length property: finds the length of a string; an empty string is length 0

  syntax:
  string.length

    ex: 
    var greet = "Hello, ";
    greet.length; //7

- charAt() method: returns a character at a specified index in a string

  syntax:
  string.charAt(index);

    ex:
    var greet = "Hello, ";  
    greet.charAt(0); //'H'
  
    ex (get the last letter in a string):
    var greet = "Hello,";
    greet.charAt(greet.length - 1); // ","

- concat() method: 
  joins two or more strings
  creates a new string
  doesn't change original string

  syntax:
  string.concat(string1, string2, ..., stringX);

    ex: 
    Wo.concat("rl").concat("d"); //"World"
  
    ex: 
    var greet = 'Hello ';
    var place = 'World'
  
    greet.concat(place); //'Hello World'

- indexOf(): 
  returns the first occurence of a value in a string 
  if value not found, returns -1
  case sensitive

  syntax:
  string.indexOf(searchvalue, start);

    ex:
    "ho-ho-ho".indexOf('h'); //0
    
    ex:
    let text = 'ho-ho-ho';
    text.indexOf('h', 2); //3 //find index of h starting at position 2
  
    ex:
    let greet = "Hello World, welcome to the Universe.";
    greet.indexOf('welcome'); //13

- lastIndexof():
  finds the last instance of a value in a string
  works similarly to indexOf()

- split():
  splits a string into an array of substrings
  returns a new array
  does not alter the original string
  if " " is used as a separator, split(" ") splits in between words

  syntax:
  string.split(separator, limit)

    ex:
    "ho-ho-ho".split('-'); //['ho', 'ho', 'ho']
  
    ex:
    let text = "How are you doing today?" 
    const myArray = split.text(" "); // ['How', 'are', 'you', 'doing', 'today?']
    let word = myArray[1]; // 'are'
  
    ex:
    let text = "How are you doing today?"
    const myArray = split.text(' ', 3); // ['How', 'are', 'you'], array is limited to 3 words

- .toUpperCase & .toLowerCase:
  changes the case of the values in a string
  
    ex:
    let greet = "Hello";
    greet.toUpperCase; //"HELLO"
    greet.toLowerCase; //"hello"

  _________________________________________________

OBJECT METHOD

- method: a function that is a property of an object

- an object's properties are referred to as key-value pairs

- you can assign key-values to an object using dot notation and the assignment operator

- ex:

  let myCar = {}
  myCar.color = red;

- an object's key-values can include functions or methods, which are functions of an object

- ex:

  car.turnKey = function() {
    console.log('Car is running.');
  }

- this function can only be accessed through the object that it is a member of
  .turntheKey needs to be accessed through myCar, use myCar.turntheKey
  when invoking methods, a parentheses needs to be used after function

- constructing an object with properties using the constructor function
  3 properties (key values) total, the function is a method 

  var = myCar {};
  car.mileage = 98765;
  car.color = 'red';
  console.log(myCar);
  car.turnTheKey = function() {
    console.log('The engine is running.');
  }
  console.log(myCar);
  car.lightsOn = function () {
    console.log('The lights are on.')
  }
  console.log(myCar);
  myCar.lightsOn();
  myCar.turnTheKey();

- constructor function (w3):
  creates a blueprint for many objects of the same type
  objects using the constructor function are called using the "new" keyword
  use uppercase first letter when naming constructor functions 
  "this" keyword used to construct function properties

  ex:

    function Person(first, last, age, eye) {
      this.firstName = first;
      this.lastName = last;
      this.age = age;
      this.eyeColor = eye
    }

    const myFather = new Person('John', 'Doe', '50', 'brown');
    
    //get script to run in HTML
    document.getElementById("").innerHTML = 'My father is' + myFather.age + ' .'
    
_________________________________________________

TYPE OF

- typeof operator accepts a value and returns the data type of that value as a string result
 
  ex:
  
    var test = typeof(10);
    console.log(test);
    //number

    var test = typeof('What data type is this?');
    console.log(test);
    //string

    var test = typeof(1<2);
    console.log(test);
    //boolean

    var test = [1, 2, 3, 4];
    console.log(test);
    //object, because arrays are objects

    var test = function () {
    };
    console.log(test)l
    //function

- can return the following results:
  string
  number
  object 
  boolean
  function
  null
  undefined

_________________________________________________

BUGS AND ERRORS

- a bug causes a computer program to run in an unintended way

- an error stops a computer program from running; ex: syntax, reference, and type errors
  when an error gets thrown, the program stops
  
- reference error: occurs when data isn't defined or declared
    ex:  
    console.log(c + d);
      //returns reference error, code doesn't run

- syntax error: occurs when you write an unreadable bit of code
    ex:
    var greet = "Hello;
    //returns syntax error, missing quotation mark

- type error:
    ex:
    (5).pop;
    //returns type error because pop() is an array method and 5 is a number data type not an array data type

_________________________________________________

TRY CATCH BLOCKS

- when an error prevents code from running there are built in JS commands that help code run despite errors

- these commands use the words "throw," "try," and "catch"

- error handling: process of preventing code from stopping when there's an error

- if a piece of code throws an error, it can get wrapped inside a try block 

- after this, the error is catched within a catch block

  syntax:

    try {
      console.log(err); 
    } catch err {
    //do something here...
    }

- try catch block

  ex:

    try {
      console.log(c + d)
    } catch (err) {
      console.log(err); //remember to console.log the error
      console.log('There was an error');
      console.log('The error was saved in the error log');
    }
    console.log('My program does not stop.') //confirms that code still ran despite error

  steps:
  insert the code you think might run an error in between the curly brackets of a try block
  insert a catch block; a catch block catches the actual error, which is an object
  name the error something short and simple, ex: err
  console log the error
  console log the lines you want to run after error is catched

- "throw" keyword: throw an error from the try block to the catch block
  throw keyword must be used inside the try block
  how to manually throw an error:

  ex:

    try {
      throw new ReferenceError(//input error message here); 
    } catch(err) {
      console.log(err);
      console.log('There was a Reference Error');
    }
    console.log('My program does not stop.')

    ex :
    (from Week 2 "Exercise: Error Prevention")

    function addTwoNums (a,b) {
      try {
         if (typeof(a) != 'number') {
          throw ReferenceError ('The first argument is not a number.');
        } else if (typeof(b) != 'number') {
          throw ReferenceError ('The second argument is not a number.');
        } else {
          console.log (a + b);
          }  
        } catch err {
          console.log("Error!", err);
          }
      }

    addTwoNums (5, '5');
    console.log ('This code still works.')
      

_________________________________________________

SYNTAX, LOGICAL, AND RUNTIME ERRORS

- types of errors:
  ReferenceError
  SyntaxError
  TypeError
  RangeError

- ReferenceError:
  occurs when you try and use an undeclared variable
  
  ex:
    console.log(username);
    //Uncaught ReferenceError : username is not defined

- SyntaxError
  occurs when you write invalid JS code or execute syntax incorrectly
  
  ex:
    var a "missing assignment operator"
    //Uncaught Syntax Error : unexpected string
  SyntaxErrors cannot be caught with try...catch blocks

- TypeError
  occurs when you try and perform a method on a non-supported data type
  
  ex:
    "string".pop()
    //Uncaught Type Error : "hello".pop is not a function

- RangeError 
  occurs when we use a value that is out of range of the acceptable values for a function
 
  ex:
    (10).toString(2);
    '1010'

  this code converts 10 to a base 2 number and returns it as a string
  however, if you try to convert a number to base 100, which does not exist/is out of range...
  
  ex:  
    (10).toString(100);
  ...you get the following error:
  //Uncaught RangeError : toString() radix argument must be between 2 and 36
  
_________________________________________________

UNDEFINED, NULL, AND EMPTY VALUES

- use these values when you need to mark the places where a value should exist
- null value:
  represents the intentional absence of a value
  its also a return value of some built in JS methods

  ex, using the match method:
    var letters = 'abc';
    letters.match(/a/);

    in console:
    /*[
    'a',
    index: 0,  
    input: abc,
    groups: undefined
    ] */

 but if you write the following code: 
    var letters = 'abcd';
    letters.match(/d/);
  the console returns:
    //null
  
- match method : searches for a substring in a string, returns null if no result
  syntax: string.match("...") or string.match(/.../)

- undefined value:
  used for creating a variable and assign it a value later
  also occurs when a variable is declared without an assignment

  ex:
    console.log(Jane);
    //undefined

  ex:
    var Jane;
    //undefined

  after declaring them, you can later assign these variables values 
  best practice: assign values when you declare them
  if you try to run code with an undefined variable, you'll receive a Reference Error
  undefined values also occur when you try to access an object property that doesn't exist

  ex:
    var game = {
      score = 100;
    }
    game.Score;
    //undefined

- empty strings: 

  ex:
    var 1 = ' '; 


 
  
  



  






  

