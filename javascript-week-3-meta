INTRODUCTION TO FUNCTIONAL PROGRAMMING

- programming paradigms: different styles of coding
  functional programming (FP)
  object-oriented programming (OOP)

- in functional programming:
  there is a clear delineating between data and functions

- in object-oriented programming
  you combine both data and functions into objects

________________________________

RETURN VALUES FROM FUNCTIONS

- you can return values inside one function inside another function

  ex: 
  function doubleIt(num) {
    return num * 2
  }

  function objectMaker(val) {
    return {
      prop: val
    }
  }

objectMaker(doubleIt(100));
//{prop: 200}

________________________________

FUNCTION CALLING AND RECURSION

- functions that loop are useful unless if they run infinitely 

- recursion is a function that calls itself

- recursive functions can run infinitely if done incorrectly

- recursion is an alternative way to run repetitive code without loops

- to avoid infinite recursion, set counter starting value, incremement, and exit condition

  ex:
  let counter = 3;
  function.example() {
    console.log(counter);
    counter = counter - 1;
    if (counter === 0) return;
    example();

________________________________

INTRODUCTION TO SCOPE

see : https://www.freecodecamp.org/news/scope-in-javascript-global-vs-local-vs-block-scope/#how-to-access-local-variables


- scope determines which part of code are accessible and which are inaccessible

- global scope: code that's outside of a function

- local scope: code that's inside of a function

- if a variable is defined within a function, you can say that it's scoped to that function

- the scope chain: 
  chain of scope references a function has to its parent scope
  the process of searching for variables through multiple scopes
  starts with local or block and moves down to global scope 

- lexical scope:
  the scope of a function is determined by where the function is declared, not where it is called

    

________________________________

THE FUNCTIONAL PROGRAMMING PARADIGM

FP :
- when writing FP code data and functions are kept separate 

- in FP data is passed into functions when we want something computed

- in FP functions return new values and then use those values somewhere else in the code

  ex:

    function getDistance (mph, h) {
      return mph * h 
    }
    var mph = 60;
    var h = 2;
    var distance = getDistance(mph, h);
    console.log(distance);

 OOP:

- data and functionality are properties and methods inside objects

  ex:

    var virtualPet = {
      sleepy: true.
      nap: function() {}
    }

- in OOP methods update properties stored in object instead of generating new return values

- if we want to change sleepy property:

    var virtualPet = {
      sleepy: true,
      nap: function () {
        this.sleepy = false
      }
    }
  console.log(virtualPet.sleepy) // true
  virtualPet.nap()
  console.log(virtualPet.sleepy) // false

- OoP helps us model real-life objects 

- works best when grouping of properties and data in an object belong together

FP, important concepts:

- first-class functions
- higher-order function
- pure functions and side-effects

- first-class functions
  
  are values that we can: 
    pass into other functions like a string or number,
    save in a variable
    return from other functions
    
  are values just as strings or numbers

  ex: 
    function addTwoNums(a, b) {
      console.log(a + b);
    }

    function randomNum() {
      return Math.floor((Meth.random() * 10) + 1);
    function specificNum() {return 42};

    var useRandom = true;

    var getNumber;

    if(useRandom) {
      getNumber = randomNum;
    } else {
      getNumber = specificNum
    }
  
    addTwoNums (getNumber(), getNumber())

- higher order functions

  a function that has either one or both of the following characteristics"
    it accepts other functions as arguments
    it returns functions when invoked

  ex: 
    function addTwoNums(getNumber1, getNumber2) {
      console.log(getNumber1() + getNumber2());
    }

  this receives arguments then invokes and concatenates them

- pure functions and side-effects:

  returns the same result as long as it's given the same values

  ex:
    function addTwoNums(a, b) {
      console.log(a + b);
    }

  do not have side-effects, including:
    changing variables outside of the function
    calling a Browser API
    calling Math.random()

- impure functions
  use non-local variables for computing is output
  creates a side effect by modifying another variable

________________________________

SCOPING WITH VAR, LET, AND CONST

- functions can build local scope and block scope

- block scope: 
  a variable is only accessible within a code block, such as if, else, switch, for, and while
  variables with block scope are further nested than local scope
  local scoped variables are further nested than global scope
  occurs when you declare a variable using let or const
  unlike local scope where variables are accessible within their function, 
  block scoped variables are only accessible within their block

  ex (variable shadowing):

    let color = 'red';
    if (color == 'red') {
      let color == 'blue'
    }

  two unique instances of red variable, one in global scope, one in block scope
  one red variable shadows the other

- declaring variables with var keyword
  variable can be used before it is declared
  the same variable can be redeclared
  variables can be scoped to a function or scoped globally

- declaring variables with let and const
  variables can't be used before they are declared (but they eventually need to be declared)
  variables can't be redeclared
  variables are scoped to the block

- use let when the variable value might change

- use const when the variable value will not change

________________________________

COMPARING VAR, LET, AND CONST

- let and const is recommended

- from most to least lenient: var, let, const

________________________________

INTRODUCTION TO OBJECT-ORIENTED PROGRAMMING

- OOP uses objects to group data and functionality

- templates/classes are used to write code for multiple objects

- the this keyword makes a generic alias for all objects

________________________________

CLASSES

- classes are a blueprint you can use to build many objects

  ex:
    class Car {
      constructor(color, speed) {
    }

    turboOn() {
      console.log('The turbo is on.')
    }

  syntax:
  "class" followed by class name, capitalized, followed by curly brackets
  constructor function, with all parameters needed in parentheses, followed by curly brackets
  all properties of the function, using this keyword
  afer constructor is defined, add as many methods as you want, without "function," just method name

  accessing the function:
  name of car, specifically
  .name of function

    car1 = new Car(red, 100mph);
    car1.turboOn();

  ex:
    class Car {
      constructor(brand) {
        this.carname = brand;
      }
    }
    mycar =  new Car("Ford");

  ex :
  https://www.w3schools.com/JsrEF/jsref_constructor_class.asp

    class Car {
      constructor(brand) {
        this.carname = brand;
      }
    }
    present() {  
      return 'I have a ' + this.carname;
    }
    class Model extends Car {
      constructor(brand, mod) {
        super(brand);
        this.model = mod;
      }
    }
    show() {
      return this.present() + ,' it is a ' + this.model;
    }

  mycar = new Model ("Ford," "Mustang");
  document.getElementbyId('demo').innerHTML = mycar.show();

  "extends" keyword inherits all methods from another class 
  "super" method calls parent's constructor function
  objects using super inherit a function within a class

- use the prototype keyword to add new properties and methods to objects after construction

  function MakeCar (brand, mod) {
      this.model
      this.brand
  }
  
  //adding a new property
  MakeCar.prototype.color = 'red';

  //adding a new method
  MakeCar.prototype.beep = function() {
    console.log('Beep, beep!');
  }
________________________________

OBJECT ORIENTED PROGRAMMING PRINCIPLES

- OOP helps developers mimic relationship between objects in real world

- OOP helps developers reason about relationships between objects in software

- OOP :
  allows you to write modular code
  makes code more flexible
  makes code reusable

- 4 fundamental OOP principles:
  1. inheritance
  2. encapsulation
  3. abstraction
  4. polymorphism

- objects exist in a hierarchical structure; all objects derive from the object class

- you can create objects with the Object.create() method

  ex:
    class Animal {/*class code here*/};
    var myDog = Object.create(Animal);
    console.log(Animal)

- you can also create objects with the "new" keyword

  ex:
    class Animal {/*class code here*/};
    var myDog = new Animal();
    console.log(Animal)

- inheritance:
  there is a base class of a thing
  there is one or more sub-classes of things that inherit the properties of the base class
  base class is also referred to as super-class
  there can be sub-sub-classes, which inherit from a sub-class

  ex:
    class Animal {/*class code here*/};
    class Bird extends Animal {/*class code here*/};
    class Eagle extends Bird {/*class code here*/}

- encapsulation:
  the process of making a code implementation hidden from other users
  other users can use code without knowing how code works

  ex:
    "abc".toUpperCase();

- abstraction:
  writing code in a way that makes it more generalized
  extracting the concepts of what you're trying to do, rather than dealing with a specific manifestation of that concept

- polymorphism:
  when the same function produces different results based on its context
    ex:
      
      ringing a bell on a bicycle vs. ringing a bell on a bike:
        const bicycle = {
          bell: function() {
            return "Ring, ring! Watch out, please!"
          }
        }
         const door = {
          bell: function() {
            return "Ring, ring! Come here, please!"
          }
        }

      accessing the bell() method on the bicycle and door objects
        bicycle.bell(); // "...Watch out, please!"
        door.bell(); // "...Come here, please!"

        the bell function is polymorphic

      the "thing" keyword
        function ringTheBell(thing) }
          console.log(thing.bell())
        }

        ringTheBell(bicycle); // "...Watch out, please!"  
        ringTheBell(door); // "...Come here, please!"  

________________________________

CONSTRUCTORS

- native objects: JavaScript's built-in objects 

- constructors allow us to build instances of native objects

- constructors must be capitalized

  ex : creating a new instance of the Date object
    new Date();
    //outputs datetime

- certain objects come with the constructor function
  for ex, running new Math() throws an Uncaught TypeError 
  the Math object is a static object whose properties can be accessed directly from Math() object

  ex:
    function Icecream(flavor) {
      this.flavor = flavor;
      this.meltIt = function() {
        console.log(`The ${this.flavor} icecream has melted`);
      }
    }

    let kiwiIceCream = new Icecream('kiwi');
    let appleIcecream = new Icecream('apple');
    kiwiIcecream;
    appleIcecream;

- string literal vs. string object

  let pear = 'pear';
  pear; // --> 'pear'

  vs.

  let apple = new String('apple');
  apple; // -->String {'apple'}

  the string literal, or primitive value will be more performant than the string object
  if you compare objects they will always return false because the space in memory which they occupy is unique
    new String('apple') === new String('apple') //--> false

- when constructing plain, regular objects, don't use constructors, use literal syntax: {}

- RegExp objects: regular expression objects
  used to pattern-match strings using regular expressions
  built using "new RegExp" code
  instead of using RegExp, use a pattern literal

    ex:
      "abcd".match(/d/); 
      //['d', index: 3, input: 'abcd', groups: undefined]

  avoid constructors with native objects like arrays, functions, and regexp

________________________________

INHERITANCE

- the inheritance model revolves around the prototype

- prototype: an original model from which other forms are developed
  can hold properties shared by multiple other objects

  ex:
  
    var bird = {
      hasWings: true,
      canFly: true,
      hasFeathers: true
    }

- create new objects from this prototype using object.create function

  ex:

    var eagle1 = Object.create(bird);
    console.log('eagle1: ' , eagle1);
    //output: eage1: {}
    //an empty object is logged to the console

    //checking inheritance of bird properties to eagle1
    console.log('eagle1 has wings:", eagle1.hasWings);
    console.log('eagle1 can fly:", eagle1.canFly);
    console.log('eagle1 has feathers:", eagle1.hasFeathers);

    /*output:
    eagle1 has wings: true
    eagle1 can fly: true
    eagel1 has feathers: true*/


  ex:

    var eagle2 = Object.create(bird);
    console.log('eagle2 has wings:', eagle2.hasWings)
    //output: eagle2 has wings: true

  ex:
    
    //overriding inherited properties from prototype
    var penguin1 = Object.create(bird);
    penguin1.canFly = false;
    console.log ('penguin1 has feathers:', penguin1.hasFeathers);
    console.log('penguin1 can fly:', penguin1.canFly);
    /*output: penguin1 has feathers: true;
    penguin1 can fly: false*/

- you can build inheritance using object.create method

- but using classes rather than object.create method works better in complex scenarios

________________________________

CREATING CLASSES

- inheritance in JS is based around the prototype object

- all objects built from prototype share same functionality

- the class keyword creates objects that inherit from prototypes

- syntax:
  Class classname {
    constructor(parameter, parameter) {
      this.property = ...;
      this.property = ...;
      this.property = ...;
    }
  }

  ex:

    class Train {
      constructor (color, lightsOn) {
        this.color = color;
        this.lightsOn = lightsOn;
      }
    }

    var myFirstTrain = new Train('red', false);
    console.log(myFirstTrain);
    //output: Train {color: 'red', lightsOn: false}

- you can add methods to classes, all methods get added to prototype

    class Train {
      lightsStatus () {
        console.log('Lights on?', this.lightsOn)
      }
    getSelf() {
      console.log(this);
      }
    getPrototype() {
      var proto = Object.getPrototypeOf(this);
      console.log(proto);
    }
    }

- getSelf() prints out the properties on he object instance it is called on
- getPrototype console logs the prototype of the object instance of the Train class

    var train4 = new Train('red', false);
    train4.toggleLights(); //undefined
    train4.getSelf(); //Train {color: 'red', lightsOn: true}
    train4.getPrototype; //constructor: f, toggleLights: f, lightsStatus:f, getSelf: f, getPrototype: f}

- implementing polymorphism using classes in JavaScript
- toggleLights method behaves differently on Train and HighSpeedTrain

  class HighSpeedTrain extends Train {
    constructor (passengers, highSpeedOn, color, lightsOn) {
      super(color, lightsOn);
      this.passengers = passengers;
      this.highSpeedOn = highSpeedOn;
    }
    toggleHighSpeed () {
      this.highSpeedOn = !this.highSpeedOn;
      console.log('High speed status:', this.highSpeedOn);
    }
    toggleLights() {
      super.toggleLights();
      super.lightsStatus();
      console.log('Lights are 100% operational.');
    }
  }
- toggleLights() method has been updated to console log a message
- super defines what the subclass inherits from its super-class

  var highSpeed1 = new HighSpeedTrain (200, false, 'green', false);

- a class can be used as another class constructor property


________________________________

DESIGNING AN OO PROGRAM 



class Animal {
  constructor (color = 'yellow', energy = 100) {
    this.color = color;
    this.energy = energy;
  }
  isActive() {
    if (this.energy > 0) {
      this.energy -= 20;
      console.log ('Energy decreasing, currently at:', this.energy);
    } else if (this.energy ==0) {
        this.sleep;
    }
  }
  sleep() {
    this.energy += 20;
    console.log ('Energy increasing, currently at:', this.energy);
  }
  getColor() {
    console.log(this.color);
  }
}

class Cat extends Animal {
  constructor (color, energy, sound = 'purr', canJumpHigh = true, canClimbTrees = true) {
    super (color, energy);
    this.sound = sound;
    this.canJumpHigh = canJumpHigh;
    this.canClimbTrees = canClimbTrees;
  }
  makeSound() {
   console.log(this.sound)
  }
}

class Bird extends Animal {
  constructor (color, energy, sound = 'chirp', canFly = true) {
    super(color, energy);
    this.sound = sound;
    this.canFly = canFly;
  }
  makeSound() {
    console.log(this.sound);
  }
}

class Housecat extends Cat {
  constructor (color, energy, sound, canJumpHigh, canClimbTrees, houseCatSound = 'meow') {
    super (color, energy, sound, canJumpHigh, canClimbTrees);
    this.houseCatSound = houseCatSound;
  }
  makeSound(option) {
    if (option == true) {
      console.log(super.makeSound);
    }
     console.log(this.houseCatSound);
    }
  }
}

class Tiger extends Cat {
  constructor (color, energy, sound, canJumpHigh, canClimbTrees, tigerSound = 'Roar!') {
    super (color, energy, sound, canJumpHigh, canClimbTrees);
    this.tigerSound;
  }
  makeSound(option) {
    if (option == true) {
      console.log(super.makeSound);
    }
     console.log(this.tigerSound);
    }
  }
}

class Parrot extends Bird {
  constructor (color, energy, sound, canFly, canTalk = false) {
    super(color, energy, sound, canFly);
    this.canTalk 
  }
   makeSound(option) {
    if (option == true) {
      console.log(super.makeSound);
    }
    if (this.canTalk) {
     console.log('I'm a talking parrot!');
    }
  }
}

//building two parrots, one that can talk, one that cannot:
let polly = new Parrot(true);
let fiji = new Parrot(false);
polly.makeSound(); //'Chirp! I am a talking parrot!'
fiji.makeSound(); //'Chirp!'
polly.isActive; //Energy decreasing, currently at: 80
let penguin = new Bird (blackandwhite, 200, 'shriek!', false);
let leo = new Housecat;
leo.makeSound(false); //'purr!'
leo.makeSound(true); //'Purr. meow'

________________________________

REGULAR EXPRESSIONS

found on w3:

- reg exps can be used to perform all types of text search and text replace operations

- syntax: /pattern/modifiers

- the search method uses an expression to search for and returns the position of the match

- the replace method returns a modified string where the pattern has been replaced

  ex:
    let string = 'Hello World';
    string.search(/world/i); //search for word, case insensitive
    //output: 6

  ex:
    let string = 'Hello World';
    string.replace(/Universe/);
    string;
    //output: Hello Universe

found on freeCodeCamp:
https://www.youtube.com/watch?v=ZfQFUJhPqMM&t=229s

- .test() : test to see if a string contains a regex
    
    let myString = 'Hello World';
    let myRegEx = /Hello/;
    let result = myRegEx.test(myString); // output: true

    let waldoIsHiding = 'Waldo is hiding.';
    let myRegEx = /Waldo/;
    let result = myRegEx.test(waldoIsHiding); // output: true

    let petString = 'James has a pet cat.'
    let petRegex = /dog|cat|bird|fish/ // searches for dog or cat, etc.
    let result = petRegex.test(petString); // output: true

- .match(): extract matches in a string
    
    let extractStr = "Extract the word 'coding' from this string.";
    let codingRegex = /coding/;
    let result = extractStr.match(codingRegex); // output: ["coding"]

    find more than first match: use the /g flag, which makes every occurence of a search pattern

      let testStr = "Repeat, repeat, Repeat";
      let ourRegex = /Repeat/ig;
      testStr.match(ourRegex);
      //output : ["Repeat, repeat, Repeat"]

    match anything with wildcard period (.)

      let humStr = "I'll hum a song";
      let hugStr = "Bear hug";
      let huRegex = /hu./
      humStr.match(huRegex); // returns ["hum"]
      hugStr.match(huRegex); // returns ["hug"]

    match a single character with multiple possibilities

      let bgRegex = /b[aiu]g/;
      let quoteSample = 'Beware of bugs in the code.'
      quoteSample.match(bgRegex);
      //output: ['bug']

    match a range of letters

      let quoteSample = "The quick brown fox jumps over the lazy dog."
      let alphabetRegex = /[a-z]/ig;
      let result = quoteSample.match(alphabetRegex);
      console.log(result);
      //output: every letter in sentence, one character at a time

    match numbers and letters of the alphabet
    
      let quoteSample = 'Blueberry 3.14s are delicious.';
      let myRegex = /[2-6h-s]ig/; //regex for 2 through 6 and letters h through s
      let result = quoteSample.match(myRegex);
      //output : every letter within specified range

    negated character sets [^]: matching everything except a specified character set

      let quoteSample = "3 blind mice.";
      let myRegex = /[^0-9aeiou]/ig
      let result = quoteSample.match(myRegex);
      console.log(result):
      //output: all letters besides aeiou, no numbers

    match characters that occur one or more times

      let difficultSpelling = "Mississippi";
      let myRegex = /s+/g; //+ sign matches additional occurences of s
      let result = difficultSpelling.match(myRegex);
      console.log(result);
      //output: ["ss", "ss", "s"]

    match characters that occur 0 or more times, using *

      let soccerWord = "goooooooal!";
      let gPhrase = "gut feeling";
      let oPhrase = "over the moon";
      let goRegex = /go*/
      soccerWord.match(goRegex); //returns ["gooooooo"]
      gPhrase.match(goRegex); //returns ["g"]
      oPhrase.match(goRegex); //returns null

    find characters with lazy and greedy matching
    greedy match (default), * : finds the longest possible part of the string that fits the regex pattern
    lazy match, *? : finds the smallest possible part of the string that fits the regex pattern

      let string = "titanic";
      let regex = /t[a-z]*i/;
      string.match(regex); // returns ["titani"]
  
      let string = "titanic";
      let regex = /t[a-z]*?i/;
      string.match(regex); // returns ["ti"]
  
      let text = "<h1>Hello World</h1>";
      let regex = /<.*>/;
      text.match(regex); // returns ["<h1>Hello World</h1>"]
  
      let text = "<h1>Hello World</h1>";
      let regex = /<.*?>/;
      text.match(regex); // returns ["<h1>"]

    plus operator, + finds multiple reoccurences of a character

      let string = "Hello World";
      let regex = /l+/;
      string.match(regex); //output: ["ll"]

    matching beginning string patterns  
    ^ checks if a word begins with a pattern

      let string = "Hey, hi, hello.";
      regex = /^Hey/;
      string.match(regex); //output: true

    
    


    


    
    
  












  
